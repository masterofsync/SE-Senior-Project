@using System.Configuration
@using System.Web.Script.Serialization
@using Newtonsoft.Json
@model contracts.Models.AdContract


@{
    //var categoryList = new contracts.Models.CategoryContractList().CategoryList;

    //var serializer = new JavaScriptSerializer();
    //var JsonData = serializer.Serialize(categoryList);

    List<SelectListItem> conditionList = new List<SelectListItem>()
   {
       new SelectListItem(){Text="Brand New", Value="Brand New"},
       new SelectListItem(){Text="New(Used Couple Times)", Value="New(Used Couple Times)"},
       new SelectListItem(){Text="Used", Value="Used"},
       new SelectListItem(){Text="spareParts", Value="spareParts"}
   };

    var errorResult = ViewData["ErrorResult"];
    if (errorResult != null)
    {
        errorResult = errorResult.ToString();
    }
    var imagePath = ConfigurationManager.AppSettings["ImagePath"];
}


<link href="~/Content/bootstrap-tagsinput.css" rel="stylesheet" />

<style>
    @*this is for tags.... refactor as soon as you can.....*@ .bootstrap-tagsinput {
        width: 100%;
    }

    .label {
        line-height: 2 !important;
    }
    #btnUpload {
        min-width: 100%;
    }
   
    @*this is for tags.... refactor as soon as you can.....*@ #uploadPreview1 img, #uploadPreview2 img, #uploadPreview3 img {
        width: 50px;
        height: auto;
    }

    input, textarea, select {
        min-width: 100%;
    }


    .containers {
        max-width: 550px;
        padding: 15px;
    }

    .bar {
        height: 18px;
        background: green;
    }

    /* Styles for validation helpers*/
    .field-validation-error {
        color: #ff0000;
    }

    .field-validation-valid {
        display: none;
    }

    .input-validation-error {
        border: 1px solid #ff0000 !important;
        background-color: #ffeeee !important;
    }

    .validation-summary-errors {
        font-weight: bold !important;
        color: #ff0000 !important;
    }

    .validation-summary-valid {
        display: none;
    }

    .error {
        color: #FF0000;
    }
</style>
<div class="panel panel-default">
    <div class="panel-heading">
        <span class="panelHeaderFont">Post Ad</span>
        @*<span class="pull-right clickableClose" data-effect="fadeOut"><i class="fa fa-times"></i></span>*@
    </div>
    <div class="panel-body">
        <section>
            @using (Html.BeginForm("PostAd", "Ad", FormMethod.Post, new { enctype = "multipart/form-data", id = "PostAdForm" }))
            {
                <fieldset>
                    <div class="form-horizontal">
                        <br />
                        @*@Html.HiddenFor(model => model.AdId)*@
                        @*<form class="form-horizontal style-form" id="PostAdForm" role="form">*@
                        <div class="form-group">
                            @Html.LabelFor(m => m.Title, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div>
                                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control", required = "required" })
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger col-md-offset-2 col-md-10" })

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Price, new { @class = "col-md-2 control-label" })
                            <div class=" col-md-10">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                                    @Html.TextBoxFor(m => m.Price, new { @class = "form-control", required = "required" })
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Description, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">




                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control ", id = "descriptionId", rows = "6", required = "required" })

                                <span id="descriptionError"></span>
                            </div>

                            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(m => m.Condition, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div>
                                    @Html.DropDownListFor(model => model.Condition, conditionList, "-- Select Condition --", new { name = "Condition", @class = "form-control", required = "required" })
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.Condition, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                        </div>


                        @*Work on Start Date and End Date... For Now default Expiry date is 20 days*@
                        @*/*StartOn*/*@

                        <div class="form-group">
                            @Html.LabelFor(m => m.StartOn, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div class="input-group date" id="datetimepicker1">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                    @Html.TextBoxFor(m => m.StartOn, "{0:MM/dd/yyyy}", new { @class = " form-control", placeholder = "mm/dd/yyyy", required = "required" })

                                </div>

                            </div>
                            @Html.ValidationMessageFor(m => m.StartOn, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Tags, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @*<div class="input-group date" id="datetimepicker1">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                        @Html.TextBoxFor(m => m.StartOn, "{0:MM/dd/yyyy}", new { @class = " form-control", placeholder = "mm/dd/yyyy", })

                                    </div>*@
                                <div>
                                    <input type="text" name="Tags" class="form-control"
                                           data-role="tagsinput" />
                                </div>
                            </div>
                        </div>

                        @*
                            /*EndOn*/
                            <div class="form-group">
                                @Html.LabelFor(m => m.Description, new {@class = "col-md-2 control-label"})
                                <div class="col-md-10">
                                    <div>
                                        @Html.TextAreaFor(m => m.Description, new {@class = "form-control"})
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(m => m.Title, "", new {@class = "text-danger col-md-offset-2 col-md-10"})
                            </div>*@

                        @*<div id="imageuploaderKo" class="containers">*@


                        <div class="form-group">

                            @Html.Label("Header Image", new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <input type="file" accept="image/*" name="imagestoUpload[0]" id="choose1" class="form-control btn btn-default" />
                                <br />
                                <div id="uploadPreview1"></div>
                            </div>




                            @*<div class="well" data-bind="filedrag: fileData">
                                    <div class="form-group row">
                                        <div class="col-md-6">
                                            <img style="height: 100px;" class="img-rounded thumbnail" data-bind="attr:{src:fileData().dataURL}, visible:fileData().dataURL"/>
                                            <div data-bind="ifnot: fileData().dataURL">
                                                <label> Drag File here</label>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <input type="file" data-bind="fileInput: fileData, customFileInput:{buttonClass:'btn btn-success',fileNameClass: 'disabled form-control',onClear:onClear}" accept="image/*">
                                        </div>
                                    </div>
                                </div>*@
                            @*@Html.LabelFor(m => m.Description, new {@class = "col-md-2 control-label"})
                                <div class="col-md-10">
                                    <div>
                                        @Html.TextAreaFor(m => m.Description, new {@class = "form-control"})
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(m => m.Title, "", new {@class = "text-danger col-md-offset-2 col-md-10"})*@
                        </div>
                        @*</div>*@



                        <div class="form-group">

                            @Html.Label("Image 2", new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <input type="file" accept="image/*" name="imagestoUpload[1]" id="choose2" class="form-control btn btn-default" />
                                <br />
                                <div id="uploadPreview2"></div>
                            </div>
                        </div>

                        <div class="form-group">

                            @Html.Label("Image 3", new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <input type="file" accept="image/*" name="imagestoUpload[2]" id="choose3" class="form-control btn btn-default" />
                                <br />
                                <div id="uploadPreview3"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Category, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div>
                                    <select id="Category" name="Category" class="form-control" required="required">
                                        <option value="" selected>-- Select Category --</option>
                                    </select>

                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.Category, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                            <br />

                        </div>

                        <div class="form-group hidden" id="subCategoryPreview">
                            @Html.LabelFor(m => m.SubCategory, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div id="subCategory">
                                    <select id="SubCategory" name="SubCategory" class="form-control" required="required">
                                        <option value="" selected>-- Select SubCategory --</option>
                                    </select>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.SubCategory, "", new { @class = "text-danger col-md-offset-2 col-md-10" })
                        </div>
                        @*<div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <div class="g-recaptcha" data-sitekey="6LdnHBwUAAAAAFiR4SxVPyiPYlNnfH2Yz7mOlIj4"></div>
                                    <input type="hidden" name="recaptcha" data-rule-recaptcha="true">
                                </div>
                            </div>*@

                        <div class="form-group">
                            <div class=" col-md-offset-2 col-md-10">
                                <button type="submit" value="Create Ad" name="Submit" class="btn btn-success" id="btnUpload">Submit</button>
                                @*@Html.ActionLink("Ad","PostAd",Model)*@
                            </div>
                        </div>
                    </div>
                </fieldset>
            }
        </section>
        @*</form>*@
    </div>
</div>

<script type="text/javascript" src="@Url.Content("~/Scripts/moment.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bootstrap.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bootstrap-datetimepicker.min.js")"></script>
<script src="~/Scripts/bootstrap-tagsinput.js"></script>
<link rel="stylesheet" href="~/Content/bootstrap-datetimepicker.css" />

@*<script src='https://www.google.com/recaptcha/api.js'></script>*@
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/tinymce/tinymce.min.js"></script>
<script src="~/Scripts/tinymce/jquery.tinymce.min.js"></script>
<script>



    $(document)
        .ready(function () {
            tinymce.init({ selector: 'textarea' });
            //$.validator.addMethod("recaptcha", function (value, element) {
            //    var grecaptcha = window.grecaptcha || null;
            //    return !grecaptcha || grecaptcha.getResponse();
            //}, "Please fill reCAPTCHA");

            //$("#PostAdForm").validate({
            //    ignore: '.no-validation',
            //    errorElement: "em",
            //    errorPlacement: function (error, element) {
            //        error.appendTo(element.closest(".col-md-9"));
            //    }
            //});



            @if (errorResult != null)
    {
        <text>alertify.error("@errorResult");</text>

    }


            $("#PostAdForm")
                .on("submit",
                    function (e) {
                        var status = $("#PostAdForm").valid();
                        if (status === true) {
                            var content = tinyMCE.activeEditor.getContent();
                            if (content === "") {
                                e.preventDefault();
                                $("#descriptionError")
                                    .replaceWith("<span id='descriptionError' class='text-danger col-md-10 field-validation-error' data-valmsg-for='Description' data-valmsg-replace='true'>The Description field is required.</span>");
                                $(".mce-container").css("border-color", "red");
                            } else {
                                $("#btnUpload").attr('disabled', 'disabled');
                                $("#btnUpload").html('<img class="loading-image" style="width:42px;height:18px;" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />');
                            }
                        }
                    });

            //Getting Categories & Sub Categories Json Object from DB And pushing categories to the dropdown
            var data;
            $.ajax({
                url: "@Url.Action("GetCategoriesJson", "Category")",
                type: 'GET',
                dataType: 'json',
                async: true,
                success: function (responseData) {
                    data = responseData;

                    var CategoryOption = "";
                    $.each(responseData,
                        function (i, item) {
                            if (item.Category.Name != " ") {
                                CategoryOption += '<option value="' + item.Category.Name + '">' + item.Category.Name + '</option>';
                            }

                        });
                    $('#Category').append(CategoryOption);
                }
            });


            $("#choose1")
                .change(function () {

                    $("#uploadPreview1").empty();


                    if (this.files && this.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $("#uploadPreview1").append("<div><img class='preview-img' src='" + e.target.result + "'/>&nbsp;<span></span></div><br>");

                        }

                        reader.readAsDataURL(this.files[0]);
                    }
                });
            $("#choose2")
                .change(function () {

                    $("#uploadPreview2").empty();


                    if (this.files && this.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $("#uploadPreview2").append("<div><img class='preview-img' src='" + e.target.result + "'/>&nbsp;<span></span></div><br>");

                        }

                        reader.readAsDataURL(this.files[0]);
                    }
                });
            $("#choose3")
                .change(function () {
                    $("#uploadPreview3").empty();


                    if (this.files && this.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $("#uploadPreview3").append("<div><img class='preview-img' src='" + e.target.result + "'/>&nbsp;<span></span></div><br>");

                        }

                        reader.readAsDataURL(this.files[0]);
                    }
                });

            //Cascading Drop down button for Category and Sub Categories
            $("#Category")
                .change(function () {
                    if (this.value != '') {
                        var arr = data;
                        var option = "<option value='' selected>-- Select Sub-Category --</option>";
                        var currentCategory = $("#Category").val();
                        $.each(data,
                            function (k, v) {
                                if (v.Category.Name === currentCategory) {
                                    $("#subCategoryPreview").removeClass('hidden');
                                    $.each(v.SubCategories,
                                        function (k, v) {
                                            if (v.Name != null) {
                                                option += '<option value="' + v.Name + '">' + v.Name + '</option>';
                                            }
                                        });
                                    $('#SubCategory').html(option);
                                    return false;
                                } else {
                                    $("#subCategoryPreview").addClass('hidden');
                                }
                            });
                    }
                });

            $.getScript("@Url.Content("~/Scripts/bootstrap-datetimepicker.min.js")",
                function () {
                    $('#datetimepicker1')
                        .datetimepicker({
                            minDate: new Date(),
                            format: 'MM/DD/YYYY'
                        });
                });


        });

</script>