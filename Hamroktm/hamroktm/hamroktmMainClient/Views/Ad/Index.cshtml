@using System.Configuration
@using System.Web.Script.Serialization
@model contracts.Models.AdContract

@{
    if (Model.Title != null)
    {
        ViewBag.Title = @Model.Title;
    }
    Layout = "~/Views/Shared/_HomePageLayout.cshtml";
    var imagePath = ConfigurationManager.AppSettings["ImagePath"];
    var productImagePath = ConfigurationManager.AppSettings["ProductImagePath"];
    var userImagePath = ConfigurationManager.AppSettings["UserImagePath"];
    var commaSeparatedTags = string.Join(",", Model.Tags);

    var httpCookie = Context.Request.Cookies["ebsCookie"];
    var userName = "";
    if (httpCookie != null && httpCookie["Username"] != null)
    {
        var cookie = httpCookie["Username"];
        if (cookie != null)
        {
            userName = cookie;
        }
    }
}

<style>
    .img-responsive{
        margin: auto;
    }
  
    .commentsLeft {
        max-width: 75px;
        width: 75px;
        height: 60px;
        max-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .commentsImage {
        max-width: 60px;
        max-height: 55px;
    }

  .slick-initialized .slick-slide {
    float: none;
    display: inline-block;
    vertical-align: middle;
}
    #OpenConnectModalBtn {
        font-size: 14px;
        font-weight: bolder;
    }

    .slick-next, .slick-prev {
        z-index: 999;
        position: absolute;
        width: 100px;
    }

        .slick-prev:before,
        .slick-next:before {
            font-family: 'slick';
            font-size: 40px;
            line-height: 1;
            opacity: .2;
            color: gray;
        }

    .tagsbackground {
        background-color: #bfbbbb;
        color: whitesmoke;
        border-radius: 5px;
        padding: 4px;
        width: 20px;
        height: 15px;
    }

        .tagsbackground:hover {
            background-color: #9d9a9a;
        }

    a:hover {
        text-decoration: none;
    }

    .tags {
        padding-top: 15px;
    }

    input, textarea {
        min-width: 100%;
    }
    /* Styles for validation helpers*/
    .field-validation-error {
        color: #ff0000;
    }

    .field-validation-valid {
        display: none;
    }

    .input-validation-error {
        border: 1px solid #ff0000 !important;
        background-color: #ffeeee !important;
    }

    .validation-summary-errors {
        font-weight: bold !important;
        color: #ff0000 !important;
    }

    .validation-summary-valid {
        display: none;
    }

    .error {
        color: #FF0000;
    }


</style>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-8">
                <div class="row">
                    <div>
                        <ol class="breadcrumb">
                            <li><a href="@Url.Action("Index", "Home")"> Home</a></li>
                            <li class="active"><b>Ad</b></li>
                            <li class="active"><b>@Model.AdId</b></li>
                        </ol>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="row">
                                <div class="col-md-9">
                                    <h3>
                                        <b>@Model.Title</b>
                                    </h3>
                                </div>
                                <div class="col-md-3">
                                    <div class="tags pull-right">
                                        <span class="tags">
                                            <span class="price-tag"><a href="">@String.Format("{0:C}", Model.Price)</a></span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body">
                            @if (Model.Images.Any())
                            {
                                <div class="row">
                                    <div class="col-md-offset-2  col-md-8">
                                        <div class="thumbnail">
                                            <div class="autoplay">

                                                @foreach (var image in Model.Images)
                                                {
                                                    <div>
                                                        <img class="img-responsive " src="@Url.Content(productImagePath + "Large_" + image)" alt="@image" />
                                                    </div>
                                                }


                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }
                            <div class="row">
                                <div class="col-md-12">
                                    <b>Description: </b><br />
                                    <p>@Html.Raw(@Model.Description)</p>
                                </div>
                            </div>

                        </div>
                        <div class="panel-footer">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="col-md-6">
                                        <h6><b><i class="fa fa-area-chart"></i> </b>@Model.Views total views<br /></h6>
                                    </div>
                                    @if (Model.Tags.Any())
                                    {
                                        <div class="col-md-6">
                                            <div class="pull-right">
                                                <h6>
                                                    <b>
                                                        <i class="fa fa-tags fa-flip-horizontal" aria-hidden="true"></i> &nbsp;
                                                    </b>
                                                    @foreach (var tag in Model.Tags)
                                                    {
                                                        <a href="@Url.Action("Index", "Search", new {q = tag})">
                                                            <span class="tagsbackground">
                                                                <b>@tag</b>

                                                            </span>
                                                        </a>
                                                        <span>&nbsp;</span>
                                                    }
                                                    <br />
                                                </h6>
                                            </div>
                                        </div>
                                    }
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <h3>Comments</h3>

                            <div class="media">
                                <div class="media-left">
                                    <div class="thumbnail commentsLeft">
                                        @if (userName != "")
                                        {
                                            <span id="userImage"></span>
                                        }
                                        else
                                        {
                                            <img src="@Url.Content(imagePath + "defaultAvatar.jpg")" class="media-object commentsImage">
                                        }
                                    </div>
                                </div>
                                <div class="media-body">
                                    <div id="CommentPostingArea"></div>
                                </div>
                            </div>
                            <hr>
                            <div id="AdCommentsArea">
                                <img id="loadingImageForCommentsArea" style="display: block; margin: 0 auto; height: 50px; width: 50px;" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-12">
                        <ul class="tabs">
                            <li id="ProductInfoTab" class="tab-link current" data-tab="ProductInfo">Product Info</li>
                            <li id="PosterTab" class="tab-link" data-tab="AdPosterTab">Creator</li>

                        </ul>

                        <div id="ProductInfo" class=" Ads tab-content current">
                            <div class="row">
                                <div class="col-md-12">
                                    <table class="table table-striped">
                                        <tr>
                                            <td>
                                                <b>Id</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.AdId
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <b>Title</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.Title
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <b>Price</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                $@Model.Price
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <b>Condition</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.Condition
                                            </td>
                                        </tr>

                                        <tr>
                                            <td style="width: 30%">
                                                <b>Posted On</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.StartOn.ToShortDateString()
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <b>Expires On</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.EndOn.ToShortDateString()
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <b>Category</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.Category -> @Model.SubCategory
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <b>Status</b>
                                            </td>
                                            <td>
                                                <b>:</b>
                                            </td>
                                            <td>
                                                @Model.Status
                                            </td>
                                        </tr>

                                        @if (Model.UpdatedOn != null)
                                        {
                                            <tr>
                                                <td>
                                                    <b>Updated On</b>
                                                </td>
                                                <td>
                                                    <b>:</b>
                                                </td>
                                                <td>
                                                    @Model.UpdatedOn.ToShortDateString()
                                                </td>
                                            </tr>
                                        }


                                    </table>
                                </div>
                            </div>







                            <img class="hidden loading-image" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />
                        </div>

                        <div id="AdPosterTab" class=" Ads tab-content">
                            <img class="loading-image" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />
                            <div class="AdPosterTabData"></div>

                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12 text-center">
                        <button class="btn col-md-12 btn-sm btn-success" id="OpenConnectModalBtn">
                            Make a Deal
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="DealModal" role="dialog">
        <div class="modal-dialog">
            <form class="form-horizontal" id="DealModalForm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Make a Deal</h4>
                    </div>
                    <div class="col-sm-12">
                        <div class="modal-body">

                            <div class="form-group">
                                <label for="ContactName" class="control-label">Name </label>
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                    <input type="text" id="ContactName" name="ContactName" class="form-control" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="ContactEmail" class="control-label">Email </label>
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                                    <input type="email" id="ContactEmail" name="ContactEmail" class="form-control" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="ContactDealAmount" class="control-label">Deal Amount</label>
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                                    <input type="text" id="ContactDealAmount" name="ContactDealAmount" class="form-control" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="ContactDescription" class="control-label">Message</label>
                                <textarea rows="4" id="ContactDescription" name="ContactDescription" maxlength="500" class="form-control"></textarea>
                            </div>

                            <div class="form-group">
                                <div class="g-recaptcha" id="recaptcha" data-sitekey="6LdnHBwUAAAAAFiR4SxVPyiPYlNnfH2Yz7mOlIj4"></div>
                                <input type="hidden" name="recaptcha" data-rule-recaptcha="true">
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" id="submitDealForm" class="btn btn-success">Send</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@*<script src="~/Scripts/react/react.js"></script>
    <script src="~/Scripts/react/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>*@

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src='https://www.google.com/recaptcha/api.js'></script>

<script src="~/Scripts/bootstrap-tagsinput.js"></script>
<script>
    $(document)
        .ready(function() {
            $("#OpenConnectModalBtn")
                .on("click",
                    function() {
                        $("#DealModal").modal();
                        //Get User Data
                        $.ajax({
                            url: "@Url.Action("GetUserData","Account")",
                            type: 'GET',
                            async: true,
                            success: function(response) {
                                if (response != null) {
                                    $("#ContactName").val(response.FirstName);
                                    $("#ContactEmail").val(response.Email);
                                }
                            }
                        });
                    });


            updateViews();
            showPostCommentSection();
            getAllCommentsForAd();

            $.validator.addMethod("recaptcha",
                function(value, element) {
                    var grecaptcha = window.grecaptcha || null;
                    return !grecaptcha || grecaptcha.getResponse();
                },
                "Please fill reCAPTCHA");

            $.validator.addMethod(
                'isvalidEmail',
                function(value) {
                    return /^(([^<>()[\]\\.,;:\s@@\"]+(\.[^<>()[\]\\.,;:\s@@\"]+)*)|(\".+\"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                },
                'Please enter a valid email address.'
            );

            $('#DealModalForm')
                .validate({
                    ignore: '.no-validation',
                    errorElement: "em",
                    errorPlacement: function(error, element) {
                        error.appendTo(element.closest(".form-group"));
                    },
                    rules: {
                        ContactName: {
                            required: true,
                            maxlength: 50
                        },
                        ContactEmail: {
                            required: true,
                            isvalidEmail: true
                        },
                        ContactDealAmount: {
                            number: true,
                            required: true
                        }
                    },
                    messages: {
                        ContactDealAmount: "Enter valid Amount."
                    }
                });

            $("#submitDealForm")
                .on("click",
                    function() {
                        dealFormSubmission();
                    });

            function dealFormSubmission() {
                var name = $("#ContactName").val();
                var email = $("#ContactEmail").val();
                var dealAmount = $("#ContactDealAmount").val();
                var message = $("#ContactDescription").val();


                var jsonData = {
                    'model': {
                        'Name': name,
                        'Email': email,
                        'DealAmount': dealAmount,
                        'Message': message,
                        'AdId':@Model.AdId
                        }
                };
                var test = @Html.Raw(new JavaScriptSerializer().Serialize(Model));
                //submit the deal if form is complete and valid
                if ($("#DealModalForm").valid()) {
                    $.ajax({
                        url:'@Url.Action("MakeDeal","Ad")',
                        type:'POST',
                        data:jsonData,
                        async:true,
                        beforeSend:function() {
                            $("#submitDealForm").attr('disabled', 'disabled');
                            $("#submitDealForm").html('<img class="loading-image" style="width:42px;height:18px;" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />');
                        },
                        success:function() {
                            alertify.success("Deal has been sent!");
                            $("#DealModal").modal('toggle');
                            $("#DealModalForm")[0].reset();
                            grecaptcha.reset();
                            $("#submitDealForm").html('Send');
                            $("#submitDealForm").removeAttr('disabled', 'disabled');
                        }
                    });
                };
            }
            function updateViews() {
                $.ajax({
                    url: '@Url.Action("UpdateViews", "Ad")',
                    type: 'PATCH',
                    data: { 'id': @Model.AdId },
                    async: true,
                    success: function() {

                    }

                });
            }

            showUserImage();
            //get user image
            function showUserImage() {
                $.ajax({
                    url:'@Url.Action("GetUserImage", "Account")',
                    type: 'GET',
                    async: true,
                    success: function(response) {
                        var data = response;
                        if (data != "") {
                            $("#userImage")
                                .html("<img src='@Url.Content(userImagePath)" +
                                    data +
                                    "' class='media-object commentsImage'>");
                        } else {
                            $("#userImage").html("<img src='@Url.Content(imagePath + "defaultAvatar.jpg")' class='media-object commentsImage'>");
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        $("#userImage").html("<img src='@Url.Content(imagePath + "defaultAvatar.jpg")' class='media-object commentsImage' >");
                    }


                });
            }





            //checking if user is logged in to show post comment section
            function showPostCommentSection() {
                $.ajax({
                    url:'@Url.Action("GetPostCommentSection", "Comment")',
                    type:'GET',
                    async:true,
                    success:function(response) {
                        $("#CommentPostingArea").html(response);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        $("#CommentPostingArea").html("<div class='panel panel-info'><div class='panel-body'>Please <a href='@Url.Action("Login", "Account", new { @returnUrl = Url.Action(ViewContext.RouteData.Values["action"].ToString(), ViewContext.RouteData.Values["controller"].ToString()) })'><b>Log In</b></a> to post Comments!</div></div>");
                    }


                });
            }

            //Get all comments
            function getAllCommentsForAd() {
                $.ajax({
                    url:'@Url.Action("GetAllAdComments", "Comment")',
                    contentType: "application/json; charset=utf-8",
                    type:'GET',
                    data: {'adId':@Model.AdId },
                    async: true,
                    success: function(response) {
                        $("#loadingImageForCommentsArea").addClass('hidden');
                        $("#AdCommentsArea").html(response);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        $("#AdCommentsArea").html("<div class='error'>Could not load Comments!</div>");
                    }


                });
            }

            //post comment
            $(document)
                .on('click',
                    '#postComment',
                    function(e) {
                        e.preventDefault();
                        if ($("#commentForm").valid()) {

                            var commentMessage = $("#commentArea").val();

                            if ($.trim($('#commentArea').val()) === '') {
                                alertify.error("Enter some comment before posting!");
                            } else {
                                $.ajax({
                                    url: '@Url.Action("PostComment", "Comment")',
                                    type: 'POST',
                                    data: { 'comment': commentMessage, 'adId': @Model.AdId },
                                    async: true,
                                    beforeSend:function() {
                                        $("div#commentPostOptions").find("span.btn").prop('disabled', true);
                                        $("div#commentPostOptions").find("span.btn").attr("disabled", true);
                                        $("#postComment").html('<img class="loading-image" style="width:42px;height:18px;" src="@Url.Content(imagePath + "spin.svg")" alt="loading" />');
                                    },
                                    success: function (responseData) {
                                        $('#remainingChar').text(500);
                                        $("#commentForm").validate().resetForm();
                                        $("#commentArea").val('');
                                        $("#commentPostOptions").addClass("hidden");
                                        getAllCommentsForAd();
                                        window.alertify.success("Comment Posted!");
                                        $("div#commentPostOptions").find("span.btn").prop('disabled', false);
                                        $("div#commentPostOptions").find("span.btn").removeAttr('disabled');
                                        $("#postComment").html('Submit');


                                    },
                                    error: function () {
                                        alertify.error("Comment could not be posted! Try Again later!");
                                        $("div#commentPostOptions").find("span.btn").prop('disabled', false);
                                        $("div#commentPostOptions").find("span.btn").removeAttr('disabled');
                                        $("#postComment").html('Submit');
                                    }
                                });
                            }}
                    });

            $("#PosterTab")
                .on("click",
                    function() {
                        poster();
                    });


            function poster() {
                $.ajax({
                    url: '@Url.Action("GetAdPoster", "Account")',
                    type: 'GET',
                    async: true,
                    data:{userName:'@Model.CreatedBy'},
                    success: function(response) {
                        $('#AdPosterTab').html(response);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        $('#AdPosterTab')
                            .html("<div class='error'>Error Retrieving Poster Info. Please refresh the page and Try again!</div>");
                    }
                });
            }

            $('ul.tabs li')
                .click(function() {
                    var tab_id = $(this).attr('data-tab');

                    $('ul.tabs li').removeClass('current');
                    $('.tab-content').removeClass('current');

                    $(this).addClass('current');
                    $("#" + tab_id).addClass('current');
                });

            $.getScript('/Scripts/slick.js',
                function() {
                    //Do Stuff with the loaded plugin
                    $('.autoplay')
                        .slick({
                            rt1: true,

                            autoplay: true,
                            autoplaySpeed: 5000,
                            arrows: true

                        });

                });

            //after click on followbutton
            $(document)
                .on("click",
                    "#FollowUserButton",
                    function() {
                        $.ajax({
                            url:'@Url.Action("Follow","Account")',
                            type:'GET',
                            data:{'userName':'@Model.CreatedBy'},
                            async:true,
                            success:function() {
                                alertify.success("Following " +'@Model.CreatedBy');
                                poster();
                            },
                            error:function(xhr,a,b) {
                                alertify.error("Cannot Follow!");

                            }

                        });
                    });

            //after click on unfollowbutton
            $(document)
                .on("click",
                    "#UnFollowUserButton",
                    function() {
                        $.ajax({
                            url:'@Url.Action("UnFollow","Account")',
                            type:'GET',
                            data:{'userName':'@Model.CreatedBy'},
                            async:true,
                            success:function() {
                                alertify.success("UnFollowed " +'@Model.CreatedBy');
                                poster();
                            },
                            error:function(xhr,a,b) {
                                alertify.error("Cannot UnFollow! Please Try again Later!");

                            }

                        });
                    });
        });


</script>
